#!/bin/bash

set -eu

function print_error ()
{
    echo -e "\e[31m${1}\e[0m"
}

function print_info ()
{
    echo -e "\e[36m${1}\e[0m"
}

function sudo_error ()
{
    print_error "Error! You are not allowed to run ${1} with sudo."
    exit 3
}

function find_domain ()
{
    # TODO any better way to do this?
    realm list | grep -B1 kerberos-member >/dev/null || (print_error "Error! This computer does not seem to be domain-joined." ; exit 2)
    ad_domain=$(realm list | grep -B1 kerberos-member | grep -v kerberos-member | awk '{print $2}')
    ad_home="/home/${ad_domain}"
}

function check_unix_credentials ()
{
    RET=1
    while [ ${RET} -ne 0 ]
    do
        read -s -p "Enter current Unix password: " fscrypt_pass

        fscrypt_user=$(whoami)
        shadow_line=$(sudo grep ${fscrypt_user} /etc/shadow)
        shadow_hash=$(awk -F':' '{print $2}' <<< ${shadow_line})
        shadow_algo=$(awk -F'$' '{print $2}' <<< ${shadow_hash})
        shadow_salt=$(awk -F'$' '{print $3}' <<< ${shadow_hash})

        entered_hash=$(openssl passwd -${shadow_algo} -salt ${shadow_salt} -stdin <<< ${fscrypt_pass})

        if [ "${shadow_hash}" == "${entered_hash}" ]
        then
            RET=0
        else
            print_error "\nInvalid credentials! Try again."
        fi
    done

    # fixing up read missing newline
    echo
}

function check_ad_credentials ()
{
    RET=1
    while [ ${RET} -ne 0 ]
    do
        read -p "Enter AD username: " fscrypt_user
        # trim anything after @
        fscrypt_user=$(awk -F'@' '{print $1}' <<< $fscrypt_user)

        read -s -p "Enter AD password: " fscrypt_pass
        kinit -l 5s ${fscrypt_user} <<< "${fscrypt_pass}" &>/dev/null && RET=$? || print_error "\nInvalid credentials! Try again."
    done

    # fixing up read missing newline
    echo
}

function check_credentials ()
{
    if [ ${home_encrypted} -eq 0 ]
    then
        check_unix_credentials
    else
        check_ad_credentials
    fi
}

function check_sessions ()
{
    IFS=' ' read -r -a active_users <<< $(users)
    for element in "${active_users[@]}"
    do
        if [ "$(getent passwd ${element} | awk -F':' '{print $6}')" == "/home/${ad_domain}/${element}" ]
        then
            print_error "Error! ${element} is logged in. Make sure all AD accounts are signed out."
            exit 1
        fi
    done
}

function check_home ()
{
    if [ ! -d /home/${ad_domain} ]
    then
        echo "/home/${ad_domain} does not exist. Trying to create it..."
        sudo mkdir "/home/${ad_domain}" || sudo_error "mkdir"
    fi
}

function get_encryption_status ()
{
    home_encrypted=0
    fscrypt_stdout=$(fscrypt status "/home/${ad_domain}" 2>&1 || true)
    grep "\"/home/${ad_domain}\" is encrypted" <<< ${fscrypt_stdout} >/dev/null && home_encrypted=1 || true
}

function get_protector_status ()
{
    protector_added=0
    if [ ${home_encrypted} -eq 1 ]
    then
        # if encrypted, policy must exist, no need to check
        fscrypt_policy=$(grep ^Policy <<< ${fscrypt_stdout} | awk '{print $2}')
        grep "login protector for ${fscrypt_user}" <<< ${fscrypt_stdout} >/dev/null && protector_added=1 || true
    fi
}

function get_protector_for_user ()
{
    fscrypt_stdout=$(fscrypt status "/")
    protector_exists=0
    grep "login protector for ${fscrypt_user}" <<< ${fscrypt_stdout} >/dev/null && protector_exists=1 || true

    if [ ${protector_exists} -eq 1 ]
    then
        fscrypt_protector=$(grep "login protector for ${fscrypt_user}" <<< ${fscrypt_stdout} | awk '{print $1}')
    else
        fscrypt metadata create protector / --user=${fscrypt_user} --source=pam_passphrase --quiet <<< "${fscrypt_pass}"
        get_protector_for_user
    fi
}


function init_encryption ()
{
    check_credentials

    echo "Renaming current AD home for ${ad_domain}..."
    sudo mv "${ad_home}" "${ad_home}.bak" || sudo_error "mv"
    echo "Creating new empty AD home for ${ad_domain}..."
    sudo mkdir "${ad_home}" || sudo_error "mkdir"
    echo "Encrypting AD home for ${ad_domain}..."
    sudo fscrypt encrypt "${ad_home}" --user=${fscrypt_user} --source=pam_passphrase --quiet <<< "${fscrypt_pass}" || sudo_error "fscrypt"
    echo "Syncing old AD home contents to new AD home..."
    sudo rsync -avH --info=progress2 --info=name0 "${ad_home}.bak/" "${ad_home}/" || sudo_error "rsync"
    echo "Deleting old AD home..."
    sudo rm -rf "${ad_home}.bak" || sudo_error "rm"
}

function print_current_protectors ()
{
    readarray -t current_protectors <<< $(fscrypt status "${ad_home}" | grep 'login protector for' | awk '{print $6}')
    for element in "${current_protectors[@]}"
    do
        echo -n "- "
        print_info "${element}"
    done
}

function extend_encryption ()
{
    check_credentials
    get_protector_status

    if [ ${protector_added} -eq 1 ]
    then
        echo "${fscrypt_user} is already added to the protectors, nothing to do."
        exit 0
    else
        get_protector_for_user
        echo "fscrypt protector set up for ${fscrypt_user} with his/her password."
        echo "Please run the following interactive command to complete setup:"
        echo
        print_info "sudo fscrypt metadata add-protector-to-policy --protector=/:${fscrypt_protector} --policy=/:${fscrypt_policy}"
        echo
        echo "You will need the login password of one of the following users:"
        print_current_protectors
    fi
}

function ask_yesno ()
{
    valid_choice=0
    yesno=(yes no)
    PS3=${1}
    select response in "${yesno[@]}"
    do
        for element in "${yesno[@]}"
        do
            if [ "${element}" = "${response}" ]
            then
                valid_choice=1
                break
            fi
        done

        if [ ${valid_choice} -eq 1 ]
        then
            break
        else
            echo "Invalid choice! Please try again."
        fi
    done
}

function encrypt_home ()
{
    if [ ${home_encrypted} -eq 0 ]
    then
        echo "Home encryption not currently enabled. Initializing..."
        init_encryption
        get_encryption_status
    fi

    if [ ${home_encrypted} -eq 1 ]
    then
        ask_yesno 'Do you want to add another user?'

        if [ "${response}" == "yes" ]
        then
            extend_encryption
        fi
    fi
}

find_domain
check_sessions
check_home
get_encryption_status
encrypt_home
